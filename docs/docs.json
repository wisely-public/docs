{
  "info": {
    "_postman_id": "f5e67b47-13ee-45e1-9ffa-51c11e06e92a",
    "name": "Wisely API",
    "description": "Wisely provides an API to interact with the core functionality of our platform and to support your brand's existing guest data integrations.\n\n# Dates / Timestamps\n- All datetimes should be submitted in ISO8601 format and in UTC, unless otherwise stated for a specific property. See request bodies for a specific request for examples.\n\n# Error Codes\n### 401: Unauthorized\n- Ensure the request contains a valid, non-expired bearer token\n\n### 404: Not found\n- Couldn't locate the resource you're seeking\n\n### 422: Validation error\n- Check the payload to ensure the values are valid\nExample:\n\n```\n{\n  \"message\": \"A validation error happened\",\n  \"validation_errors\": {\n    \"location.id\": \"Invalid value\",\n    \"order.opened_at\": \"Invalid value\",\n  }\n}\n```\n\n### 429: Rate limited\n- Use the response headers to decide when to submit the next request\n\n### 500: Internal server error\n- The server experienced an unexpected error. Please contact Wisely for further assistance",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Reservations",
      "item": [
        {
          "name": "Reservation Availability",
          "id": "03ffee01-c44e-45f0-8c26-d569101426f9",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "(Required) Bearer Token",
                "key": "Authorization",
                "value": "Bearer eyJraW...."
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/reservations/availability?merchant_id=12345&party_size=5&search_ts=2020-05-11T18:15:00-04:00&search_window_minutes=180",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "reservations",
                "availability"
              ],
              "query": [
                {
                  "key": "merchant_id",
                  "value": "12345",
                  "description": "(Required) "
                },
                {
                  "key": "party_size",
                  "value": "5",
                  "description": "(Required) Number of people in the reservation"
                },
                {
                  "key": "search_ts",
                  "value": "2020-05-11T18:15:00-04:00",
                  "description": "(Required) Timestamp to center the availability search"
                },
                {
                  "key": "search_window_minutes",
                  "value": "180"
                }
              ]
            },
            "description": "Reservation availability is broken down into `availability_types`.  You will have one default type and for more interesting use cases, you may add additional options by contacting your Wisely CSM.  By default, the API will return an array containing a single availability_type denoted with `is_default=true`.  Please see the example response provided below.\n\nWithin the availability type object, you will see a `slots` array containing objects (`timestamp`, `is_available`).  Each object represents a time slot that will accept additional bookings for the provided `party_size`  \n\n`search_ts` represents the guest's desired reservation time.  For this reason we sort the available time slots in descending order by proximity to this timestamp.  We recommend displaying multiple time slots to your guests when they search to increase the likelihood they will find an available time slot on a busy night, thereby increasing conversion.\n\nDepending on how your user interface behaves, you may want to search for availability over the entire day or constrained to a smaller window.  By default, the API will return available slots for the entire day.  To constrain the search, use the parameter `search_window_minutes`.  For example, passing `search_window_minutes=180` would constrain the search results to 3 hours on either side of your provided `search_ts`.\n"
          },
          "response": [
            {
              "id": "c93361ba-9d92-4b3a-abf8-1b638f8630b5",
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": "(Required) Bearer Token",
                    "key": "Authorization",
                    "value": "Bearer eyJraW...."
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/reservations/availability?merchant_id=12345&party_size=5&search_ts=2020-05-11T18:15:00-04:00&search_window_minutes=180",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "reservations",
                    "availability"
                  ],
                  "query": [
                    {
                      "key": "merchant_id",
                      "value": "12345"
                    },
                    {
                      "key": "party_size",
                      "value": "5"
                    },
                    {
                      "key": "search_ts",
                      "value": "2020-05-11T18:15:00-04:00"
                    },
                    {
                      "key": "search_window_minutes",
                      "value": "180"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"availability_types\": [\n  {\n   \"id\": 1234,\n   \"name\": \"Dinner Reservation\",\n   \"description\": \"This is customizable text\",\n   \"is_default\": true,\n   \"slots\": [\n    {\n     \"timestamp\": \"2020-05-11T18:00:00-04:00\",\n     \"is_available\": false\n    },\n    {\n     \"timestamp\": \"2020-05-11T18:15:00-04:00\",\n     \"is_available\": true\n    },\n    {\n     \"timestamp\": \"2020-05-11T18:30:00-04:00\",\n     \"is_available\": false\n    }\n   ]\n  },\n  {\n   \"id\": 4321,\n   \"name\": \"Mother's Day Brunch ($40 per person)\",\n   \"description\": \"Enjoy a Special 3 Course Meal (Appetizer, Entree, Dessert) to celebrate mother's day!\",\n   \"prepaid_fee\": 40,\n   \"is_flat_fee\": false,\n   \"is_default\": false,\n   \"slots\": [\n    {\n     \"timestamp\": \"2020-05-11T18:00:00-04:00\",\n     \"is_available\": true\n    },\n    {\n     \"timestamp\": \"2020-05-11T18:15:00-04:00\",\n     \"is_available\": true\n    },\n    {\n     \"timestamp\": \"2020-05-11T18:30:00-04:00\",\n     \"is_available\": true\n    }\n   ]\n  }\n ]\n}"
            }
          ]
        },
        {
          "name": "Get existing reservation",
          "id": "44b78092-e638-42d1-a60c-e156ad99c4cf",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "(Required) Bearer Token",
                "key": "Authorization",
                "value": "Bearer eyJraW...."
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/guest/reservations/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "guest",
                "reservations",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "12345",
                  "type": "string",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "id": "bf2abb85-0e8a-4a51-93d9-65e759566e8e",
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": "(Required) Bearer Token",
                    "key": "Authorization",
                    "value": "Bearer eyJraW...."
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/guest/reservations/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "guest",
                    "reservations",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"party\": {\n  \"id\": \"523f43xdsa\",\n  \"name\": \"John Snow\",\n  \"party_size\": 2,\n  \"phone\": \"+15551234567\",\n  \"email\": \"email@test.com\",\n  \"status\": \"BOOKED\",\n  \"notes\": \"We would like to request a booth near the window please!\",\n  \"reserved_at\": \"2020-05-11T18:15:00-04:00\",\n  \"created_at\": \"2020-05-03T13:12:23-04:00\",\n  \"updated_at\": \"2020-05-03T13:12:23-04:00\",\n  \"deleted_at\": \"proident\",\n  \"booking_url\": \"https://...\",\n  \"modify_url\": \"https://...\",\n  \"cancellation_url\": \"https://...\"\n }\n}"
            }
          ]
        },
        {
          "name": "Create new reservation",
          "id": "ee49dc3b-9bb2-4ce4-9713-5bea019d32a1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "description": "(Required) Bearer Token",
                "key": "Authorization",
                "value": "Bearer eyJraW...."
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"merchant_id\": 1,\n    \"name\": \"Jessica Smith\",\n    \"party_size\": 2,\n    \"phone\": \"+12025550109\",\n    \"email\": \"hello@test.com\",\n    \"availability_type_id\": 1234,\n    \"reserved_at\": \"2020-05-11T18:15:00-04:00\",\n    \"notes\": \"We would like a table near the window please!\"\n}"
            },
            "url": "{{baseUrl}}/guest/reservations",
            "description": "Please view the information under GET /reservations/availability to get the correct `availability_type_id`\n"
          },
          "response": [
            {
              "id": "1801f2e7-faa4-44c4-92bf-ba84cfea43a6",
              "name": "INTERNAL SERVER ERROR",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "description": "(Required) Bearer Token",
                    "key": "Authorization",
                    "value": "Bearer eyJraW...."
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"merchant_id\": 1,\n    \"name\": \"Jessica Smith\",\n    \"party_size\": 2,\n    \"phone\": \"+12025550109\",\n    \"email\": \"hello@test.com\",\n    \"availability_type_id\": 1234,\n    \"reserved_at\": \"2020-05-11T18:15:00-04:00\",\n    \"notes\": \"We would like a table near the window please!\"\n}"
                },
                "url": "{{baseUrl}}/guest/reservations"
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"message\": \"An unexpected error occured\"\n}"
            },
            {
              "id": "25930b5c-8b93-43e9-b61d-875f34a2aca0",
              "name": "CONFLICT",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "description": "(Required) Bearer Token",
                    "key": "Authorization",
                    "value": "Bearer eyJraW...."
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"merchant_id\": 1,\n    \"name\": \"Jessica Smith\",\n    \"party_size\": 2,\n    \"phone\": \"+12025550109\",\n    \"email\": \"hello@test.com\",\n    \"availability_type_id\": 1234,\n    \"reserved_at\": \"2020-05-11T18:15:00-04:00\",\n    \"notes\": \"We would like a table near the window please!\"\n}"
                },
                "url": "{{baseUrl}}/guest/reservations"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"message\": \"There is no availability for the requested time slot\"\n}"
            },
            {
              "id": "a73f6e13-711c-4d39-ad3b-bea217e2177e",
              "name": "OK",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "description": "(Required) Bearer Token",
                    "key": "Authorization",
                    "value": "Bearer eyJraW...."
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"merchant_id\": 1,\n    \"name\": \"Jessica Smith\",\n    \"party_size\": 2,\n    \"phone\": \"+12025550109\",\n    \"email\": \"hello@test.com\",\n    \"availability_type_id\": 1234,\n    \"reserved_at\": \"2020-05-11T18:15:00-04:00\",\n    \"notes\": \"We would like a table near the window please!\"\n}"
                },
                "url": "{{baseUrl}}/guest/reservations"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"party\": {\n  \"id\": \"523f43xdsa\",\n  \"name\": \"John Snow\",\n  \"party_size\": 2,\n  \"phone\": \"+15551234567\",\n  \"email\": \"email@test.com\",\n  \"status\": \"BOOKED\",\n  \"notes\": \"We would like to request a booth near the window please!\",\n  \"reserved_at\": \"2020-05-11T18:15:00-04:00\",\n  \"created_at\": \"2020-05-03T13:12:23-04:00\",\n  \"updated_at\": \"2020-05-03T13:12:23-04:00\",\n  \"deleted_at\": \"proident\",\n  \"booking_url\": \"https://...\",\n  \"modify_url\": \"https://...\",\n  \"cancellation_url\": \"https://...\"\n }\n}"
            }
          ]
        },
        {
          "name": "Update existing reservation",
          "id": "37be54bb-266a-4185-978a-88852325fff2",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Jessica Smith\",\n    \"party_size\": 2,\n    \"phone\": \"+12025550109\",\n    \"email\": \"test@test.com\",\n    \"reserved_at\": \"2020-05-11T18:15:00-04:00\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/guest/reservations/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "guest",
                "reservations",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "12345",
                  "type": "string",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "id": "1001020c-851c-4360-ba34-6208b978bebd",
              "name": "CONFLICT",
              "originalRequest": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"Jessica Smith\",\n    \"party_size\": 2,\n    \"phone\": \"+12025550109\",\n    \"email\": \"test@test.com\",\n    \"reserved_at\": \"2020-05-11T18:15:00-04:00\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/guest/reservations/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "guest",
                    "reservations",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"message\": \"There is no availability for the requested time slot\"\n}"
            },
            {
              "id": "2bc1a1d4-28b5-4d49-a74b-053a5b5de87d",
              "name": "OK",
              "originalRequest": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"Jessica Smith\",\n    \"party_size\": 2,\n    \"phone\": \"+12025550109\",\n    \"email\": \"test@test.com\",\n    \"reserved_at\": \"2020-05-11T18:15:00-04:00\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/guest/reservations/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "guest",
                    "reservations",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"party\": {\n  \"id\": \"523f43xdsa\",\n  \"name\": \"John Snow\",\n  \"party_size\": 2,\n  \"phone\": \"+15551234567\",\n  \"email\": \"email@test.com\",\n  \"status\": \"BOOKED\",\n  \"notes\": \"We would like to request a booth near the window please!\",\n  \"reserved_at\": \"2020-05-11T18:15:00-04:00\",\n  \"created_at\": \"2020-05-03T13:12:23-04:00\",\n  \"updated_at\": \"2020-05-03T13:12:23-04:00\",\n  \"deleted_at\": \"proident\",\n  \"booking_url\": \"https://...\",\n  \"modify_url\": \"https://...\",\n  \"cancellation_url\": \"https://...\"\n }\n}"
            },
            {
              "id": "b8ff7db5-27e6-4809-8a23-3da1cb4a507b",
              "name": "INTERNAL SERVER ERROR",
              "originalRequest": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"Jessica Smith\",\n    \"party_size\": 2,\n    \"phone\": \"+12025550109\",\n    \"email\": \"test@test.com\",\n    \"reserved_at\": \"2020-05-11T18:15:00-04:00\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/guest/reservations/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "guest",
                    "reservations",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"message\": \"An unexpected error occured\"\n}"
            }
          ]
        },
        {
          "name": "Remove existing reservation",
          "id": "88013df4-622d-4bbc-98a2-7d431c2834f8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/guest/reservations/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "guest",
                "reservations",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "12345",
                  "type": "string",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "id": "a540da9e-af0c-4423-9e61-f6502138a1fb",
              "name": "OK",
              "originalRequest": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/guest/reservations/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "guest",
                    "reservations",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"party\": {\n  \"id\": \"523f43xdsa\",\n  \"name\": \"John Snow\",\n  \"party_size\": 2,\n  \"phone\": \"+15551234567\",\n  \"email\": \"email@test.com\",\n  \"status\": \"BOOKED\",\n  \"notes\": \"We would like to request a booth near the window please!\",\n  \"reserved_at\": \"2020-05-11T18:15:00-04:00\",\n  \"created_at\": \"2020-05-03T13:12:23-04:00\",\n  \"updated_at\": \"2020-05-03T13:12:23-04:00\",\n  \"deleted_at\": \"proident\",\n  \"booking_url\": \"https://...\",\n  \"modify_url\": \"https://...\",\n  \"cancellation_url\": \"https://...\"\n }\n}"
            }
          ]
        }
      ],
      "id": "3fd0e73f-f9db-42df-a56e-306343ad2604",
      "description": "Wisely provides a drop-in HTML snippet to display the Reservations flow on your website.  If you would like to create a more custom experience, our API allows you to perform all of the same actions.\n\nUsing this API you will be able to query reservation availability and create, update and delete reservations.  Along with reservations you can attach any custom fields that are unique to your custom experience.\n\n## Authorization\n\nThis API will require a OAuth Bearer Token.  Omitting the token will result in a 401 Unauthorized Response.  See [Get Bearer Token](#b39c8f31-e907-4b58-a1d2-49eeaf43b9e2) for details."
    },
    {
      "name": "Waitlist",
      "item": [
        {
          "name": "Get current waittime",
          "id": "50e194a6-b407-45a2-a467-54f96c960f05",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "(Required) Bearer Token",
                "key": "Authorization",
                "value": "Bearer eyJraW...."
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/waitlist/waittime?merchant_id=12345&party_size=5",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "waitlist",
                "waittime"
              ],
              "query": [
                {
                  "key": "merchant_id",
                  "value": "12345",
                  "description": "(Required) identifier for merchant"
                },
                {
                  "key": "party_size",
                  "value": "5",
                  "description": "(Required) number of guests in the waitlist party"
                }
              ]
            }
          },
          "response": [
            {
              "id": "9992789b-4557-4aa6-a7f8-14fe221282cd",
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": "(Required) Bearer Token",
                    "key": "Authorization",
                    "value": "Bearer eyJraW...."
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/waitlist/waittime?merchant_id=12345&party_size=5",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "waitlist",
                    "waittime"
                  ],
                  "query": [
                    {
                      "key": "merchant_id",
                      "value": "12345"
                    },
                    {
                      "key": "party_size",
                      "value": "5"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"raw_quote\": 13.98,\n \"wait_min\": 10,\n \"wait_max\": 15\n}"
            }
          ]
        },
        {
          "name": "Get waitlist status",
          "id": "87f8fd57-6c79-49a8-b6c3-b36ca9706855",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "(Required) Bearer Token",
                "key": "Authorization",
                "value": "Bearer eyJraW...."
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/waitlist/status?merchant_id=12345",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "waitlist",
                "status"
              ],
              "query": [
                {
                  "key": "merchant_id",
                  "value": "12345"
                }
              ]
            }
          },
          "response": [
            {
              "id": "0620ac08-3e9e-457e-90e6-0b29620067b4",
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": "(Required) Bearer Token",
                    "key": "Authorization",
                    "value": "Bearer eyJraW...."
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/waitlist/status?merchant_id=quis",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "waitlist",
                    "status"
                  ],
                  "query": [
                    {
                      "key": "merchant_id",
                      "value": "quis"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"closed\": true,\n \"message\": \"We are experiencing a power outage, sorry for the inconvenience\"\n}"
            }
          ]
        },
        {
          "name": "Get existing waitlist party",
          "id": "932c03a1-f6ff-40e0-9fdd-87cc0b0a0681",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "description": "(Required) Bearer Token",
                "key": "Authorization",
                "value": "Bearer eyJraW...."
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/guest/waitlist/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "guest",
                "waitlist",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "12345",
                  "type": "string",
                  "description": "(Required) identifier returned by POST /guest/waitlist"
                }
              ]
            }
          },
          "response": [
            {
              "id": "91e7c260-5a95-4daa-8beb-ea4db5b0550f",
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": "(Required) Bearer Token",
                    "key": "Authorization",
                    "value": "Bearer eyJraW...."
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/guest/waitlist/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "guest",
                    "waitlist",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"party\": {\n  \"id\": \"5ksc23mdsa\",\n  \"name\": \"John Snow\",\n  \"party_size\": 1,\n  \"phone\": \"+15551234567\",\n  \"email\": \"email@test.com\",\n  \"status\": \"WAITING\",\n  \"wait_min\": 0,\n  \"wait_max\": 30,\n  \"expected_seat_at\": \"2020-05-11T18:45:00-04:00\",\n  \"created_at\": \"2020-05-11T18:15:00-04:00\",\n  \"updated_at\": \"2020-05-11T18:15:00-04:00\",\n  \"deleted_at\": \"fugiat Duis adipisicing qui elit\"\n }\n}"
            }
          ]
        },
        {
          "name": "Create a waitlist party",
          "id": "838e741a-5b6f-44c9-9305-b52bfa8dd676",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "description": "(Required) Bearer Token",
                "key": "Authorization",
                "value": "Bearer eyJraW...."
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"merchant_id\": 1,\n    \"name\": \"Jessica Smith\",\n    \"party_size\": 2,\n    \"phone\": \"+12025550109\",\n    \"email\": \"hello@test.com\"\n}"
            },
            "url": "{{baseUrl}}/guest/waitlist",
            "description": "Use this to add guest to the waitlist"
          },
          "response": [
            {
              "id": "a8b14ec8-9e0a-4318-9722-2ea6591122fa",
              "name": "OK",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "description": "(Required) Bearer Token",
                    "key": "Authorization",
                    "value": "Bearer eyJraW...."
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"merchant_id\": 1,\n    \"name\": \"Jessica Smith\",\n    \"party_size\": 2,\n    \"phone\": \"+12025550109\",\n    \"email\": \"hello@test.com\"\n}"
                },
                "url": "{{baseUrl}}/guest/waitlist"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"party\": {\n  \"id\": \"5ksc23mdsa\",\n  \"name\": \"John Snow\",\n  \"party_size\": 1,\n  \"phone\": \"+15551234567\",\n  \"email\": \"email@test.com\",\n  \"status\": \"WAITING\",\n  \"wait_min\": 0,\n  \"wait_max\": 30,\n  \"expected_seat_at\": \"2020-05-11T18:45:00-04:00\",\n  \"created_at\": \"2020-05-11T18:15:00-04:00\",\n  \"updated_at\": \"2020-05-11T18:15:00-04:00\",\n  \"deleted_at\": \"fugiat Duis adipisicing qui elit\"\n }\n}"
            }
          ]
        },
        {
          "name": "Update existing waitlist party",
          "id": "42106d82-aa65-42bb-b6d6-91c368475c0d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PATCH",
            "header": [
              {
                "description": "(Required) Bearer Token",
                "key": "Authorization",
                "value": "Bearer eyJraW...."
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Jessica Smith\",\n    \"party_size\": 2,\n    \"phone\": \"+12025550109\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/guest/waitlist/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "guest",
                "waitlist",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "12345",
                  "type": "string",
                  "description": "(Required) identifier returned by POST /guest/waitlist"
                }
              ]
            }
          },
          "response": [
            {
              "id": "cb70e4b7-d20b-4177-9e27-18fc19fa986b",
              "name": "OK",
              "originalRequest": {
                "method": "PATCH",
                "header": [
                  {
                    "description": "(Required) Bearer Token",
                    "key": "Authorization",
                    "value": "Bearer eyJraW...."
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"Jessica Smith\",\n    \"party_size\": 2,\n    \"phone\": \"+12025550109\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/guest/waitlist/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "guest",
                    "waitlist",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"party\": {\n  \"id\": \"5ksc23mdsa\",\n  \"name\": \"John Snow\",\n  \"party_size\": 1,\n  \"phone\": \"+15551234567\",\n  \"email\": \"email@test.com\",\n  \"status\": \"WAITING\",\n  \"wait_min\": 0,\n  \"wait_max\": 30,\n  \"expected_seat_at\": \"2020-05-11T18:45:00-04:00\",\n  \"created_at\": \"2020-05-11T18:15:00-04:00\",\n  \"updated_at\": \"2020-05-11T18:15:00-04:00\",\n  \"deleted_at\": \"fugiat Duis adipisicing qui elit\"\n }\n}"
            }
          ]
        },
        {
          "name": "Remove existing waitlist party",
          "id": "26519672-e4e8-4cf9-ac21-1cb44aaf81ea",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "description": "(Required) Bearer Token",
                "key": "Authorization",
                "value": "Bearer eyJraW...."
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/guest/waitlist/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "guest",
                "waitlist",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "12345",
                  "type": "string",
                  "description": "(Required) identifier returned by POST /guest/waitlist"
                }
              ]
            }
          },
          "response": [
            {
              "id": "64551542-8fad-4c37-be05-eb38fc8073f7",
              "name": "OK",
              "originalRequest": {
                "method": "DELETE",
                "header": [
                  {
                    "description": "(Required) Bearer Token",
                    "key": "Authorization",
                    "value": "Bearer eyJraW...."
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/guest/waitlist/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "guest",
                    "waitlist",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"party\": {\n  \"id\": \"5ksc23mdsa\",\n  \"name\": \"John Snow\",\n  \"party_size\": 1,\n  \"phone\": \"+15551234567\",\n  \"email\": \"email@test.com\",\n  \"status\": \"WAITING\",\n  \"wait_min\": 0,\n  \"wait_max\": 30,\n  \"expected_seat_at\": \"2020-05-11T18:45:00-04:00\",\n  \"created_at\": \"2020-05-11T18:15:00-04:00\",\n  \"updated_at\": \"2020-05-11T18:15:00-04:00\",\n  \"deleted_at\": \"fugiat Duis adipisicing qui elit\"\n }\n}"
            }
          ]
        }
      ],
      "id": "fe68dca3-345c-45db-9c14-ed20c93400cd",
      "description": "Wisely provides a drop-in HTML snippet to display the Waitlist flow on your website. If you would like to create a more custom experience, our API allows you to perform all of the same actions.\n\nUsing this API you will be able to query the current wait time, whether the waitlist has been closed, and create, update, and delete parties.  You can also pass any custom fields that are unique to your custom experience.\n\n## Authorization\n\nThis API will require a OAuth Bearer Token.  Omitting the token will result in a 401 Unauthorized Response.  See [Get Bearer Token](#b39c8f31-e907-4b58-a1d2-49eeaf43b9e2) for details."
    },
    {
      "name": "Orders",
      "item": [
        {
          "name": "Create Order",
          "id": "84d92873-5f67-4336-9954-c78ac4b035d2",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "type": "text",
                "value": "Bearer eyJra...."
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"order\": {\n        \"source_id\": \"yeeeeeeetss\",\n        \"location_source_id\": \"oohIvzE4mUSgu5Iwpd1kNA==\",\n        \"source_type\": \"brink\",\n        \"opened_at\": \"2021-04-21T09:15:07\",\n        \"closed_at\": \"2021-04-21T09:15:20.506165\",\n \n        \"tickets\": [\n            {\n                \"source_id\": \"yeeeeeeetss\",\n                \"open\": false,\n                \"guest_count\": 1,\n                \"opened_at\": \"2021-04-21T09:15:07\",\n                \"closed_at\": \"2021-04-21T09:15:20.506165\",\n               \"customer\": {\n                    \"fname\": \"German\",\n                    \"lname\": \"Gamboa 2\",\n                    \"email\": \"khmb8@ks.com\",\n                    \"phone\": \"4077449871\",\n                    \"email_marketing_opt_in\": true,\n                    \"sms_marketing_opt_in\": true\n                },\n                \"voided\": false,\n                \"revenue_center_id\": \"2\",\n                \"employee_id\": \"849\",\n                \"sub_total\": 975,\n                \"total\": 1037,\n                \"due\": 0,\n                \"tax\": 62,\n                \"tip\": 0,\n                \"paid\": 1037,\n                \"items\": [\n                    {\n                        \"source_id\": \"214783\",\n                        \"name\": \"GL Bartaco Marg.\",\n                        \"price\": 975,\n                        \"quantity\": 1.0,\n                        \"voided\": false,\n                        \"menu_item_id\": \"108002\",\n                        \"modifiers\": [\n                            {\n                                \"source_id\": \"130138\",\n                                \"name\": \"No Salt\",\n                                \"price\": 0,\n                                \"quantity\": 1.0,\n                                \"voided\": false,\n                                \"menu_modifier_id\": \"114301\",\n                                \"modifiers\": []\n                            },\n                            {\n                                \"source_id\": \"130052\",\n                                \"name\": \"Spicy\",\n                                \"price\": 0,\n                                \"quantity\": 1.0,\n                                \"voided\": false,\n                                \"menu_modifier_id\": \"6602\",\n                                \"modifiers\": []\n                            }\n                        ]\n                    }\n                ],\n                \"payments\": []\n            }\n        ]\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{base_gateway_url}}/pos/orders",
            "description": "## Description\n\nUse this request to save order, ticket, and guest data to Wisely.\n  \nConceptually, an order contains an array of tickets. Each ticket must have a customer object, which represents who ordered the items on the check\n\n**Rate Limit:** \nSoft limit of 30 requests per second per store.\n\n<br />\n\n## Request body\n---\n\n## `order` (required | object)\n---\n| key                                    \t| type     \t| description                                                                                                                                                                                                                                            \t|\n|----------------------------------------\t|----------\t|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\t|\n| `order.source_id` (required)           \t| string   \t| The source ID of the order, per the POS / ordering provider. Must be completely unique across all systems                                                                                                                                              \t|\n| `order.location_source_id` (required)  \t| string   \t| The source ID of the location that's fulfilling the order. Must exist in Wisely prior to saving data                                                                                                                                                   \t|\n| `order.source_type` (required)         \t| string   \t| The provider of the order data. Currently, only accepted values are \"toast\" or \"olo\"                                                                                                                                                                   \t|\n| `order.delivery_method`                \t| string   \t| The manner in which the order was delivered. Ex. curbside, delivery, dispatch, pickup                                                                                                                                                                  \t|\n| `order.delivery_address`               \t| object   \t| Information about where the order is being delivered. Fields include service_address_1, service_address_2, city, zip_code, comments, a coordinates object. coordinates contains a latitude property and a longitude property, both in decimal formats. \t|\n| `order.opened_at` (required)           \t| datetime \t| Date time of when the order was opened. Submitted in UTC                                                                                                                                                                                               \t|\n| `order.ready_at`                       \t| datetime \t| Date time of when the order is ready to be picked up by a guest. Submitted in UTC                                                                                                                                                                      \t|\n| `order.cancelled_at`                   \t| datetime \t| If the order was cancelled, this field represents when the order was cancelled. Submitted in UTC                                                                                                                                                       \t|\n| `order.closed_at`                      \t| datetime \t| Date time of when the order was closed. Submitted in UTC                                                                                                                                                                                               \t|\n| `order.pickedup_at`                    \t| datetime \t| Date time of when the order was picked up by the guest. Submitted in UTC                                                                                                                                                                               \t|\n| `order.name`                           \t| string   \t| The name of the order, likely entered via the POS or the ordering provider                                                                                                                                                                             \t|\n| `order.provider_id`                    \t| string   \t| The provider by which the order was made through. Examples include toast, grubhub, doordash, etc.                                                                                                                                                      \t|\n| `order.tickets` (required)             \t| array    \t| Represents a single ticket / check in the POS. Includes data like the items, and payments on the ticket. Also includes data bout the customer who paid out the ticket                                                                                  \t|\n| `ticket.source_id` (required)          \t| string   \t| The source ID of the check, per the POS / ordering provider. Must be unique per location_source_id                                                                                                                                                     \t|\n| `ticket.open` (required)               \t| boolean  \t| Represents whether the check is open and hasn't been paid out yet, or if it's closed                                                                                                                                                                   \t|\n| `ticket.guest_count`                   \t| number   \t| Represents how many guests were on the check, if any                                                                                                                                                                                                   \t|\n| `ticket.closed_at`                     \t| datetime \t| When the ticket was closed and paid out in the POS. Submitted in UTC                                                                                                                                                                                   \t|\n| `ticket.name`                          \t| string   \t| The name on the ticket, as entered by the server or integration via the POS                                                                                                                                                                            \t|\n| `ticket.table_id`                      \t| string   \t| The ID of the table that the guest has been sat at, if applicable                                                                                                                                                                                      \t|\n| `ticket.revenue_center_id`             \t| string   \t| The ID of the revenue center that the ticket was created in. Will be specific to the POS, if the POS has the concept of a revenue center                                                                                                               \t|\n| `ticket.employee_id`                   \t| text     \t| The ID from the source_identifier which identifies the employee who serviced the ticket                                                                                                                                                                \t|\n| `ticket.voided` (required)             \t| boolean  \t| Whether or not the ticket was voided and not counted as sales in the POS                                                                                                                                                                               \t|\n| `ticket.ticket_number`                 \t| number   \t| The number displayed on the POS for the specific ticket                                                                                                                                                                                                \t|\n| `ticket.paid` (required)               \t| number   \t| The total amount paid by the guest, in case of partial payments. Value is in cents                                                                                                                                                                     \t|\n| `ticket.tip` (required)                \t| number   \t| The total amount tipped by the guest. Value is in cents.                                                                                                                                                                                               \t|\n| `ticket.tax` (required)                \t| number   \t| The tax amount due on the check. Can vary by state. Value is in cents.                                                                                                                                                                                 \t|\n| `ticket.due` (required)                \t| number   \t| The amount due for the guest to pay when checking out. Value is in cents.                                                                                                                                                                              \t|\n| `ticket.sub_total` (required)          \t| number   \t| The sub total on the check, considering item sales and discounts. Value is in cents                                                                                                                                                                    \t|\n| `ticket.total` (required)              \t| number   \t| The total on the check, considering the sub total and tax. Value is in cents                                                                                                                                                                           \t|\n| `ticket.customer` (required)           \t| object   \t| The customer who is purchasing the items on the ticket                                                                                                                                                                                                 \t|\n| `customer.email` (required)            \t| string   \t| The email of the customer. This is required and is used to uniquely identify a user                                                                                                                                                                    \t|\n| `customer.phone`                       \t| string   \t| The phone number of the customer, expected in the e164 format                                                                                                                                                                                          \t|\n| `customer.fname` (required)            \t| string   \t| The first name of the customer                                                                                                                                                                                                                         \t|\n| `customer.lname`                       \t| string   \t| The last name of the customer                                                                                                                                                                                                                          \t|\n| `customer.email_marketing_opt_in`      \t| boolean  \t| To opt in the customer to Wisely's email marketing.                                                                                                                                                                                                    \t|\n| `customer.sms_marketing_opt_in`        \t| boolean  \t| To opt in the customer to Wisely's SMS marketing.                                                                                                                                                                                                      \t|\n| `ticket.payments` (required)           \t| array    \t| *You must speak with our customer support to ensure that you are eligible to use this.* All payments made on the current ticket. Can be empty if no payments have been made yet                                                                        \t|\n| `payment.source_id` (required)         \t| string   \t| The ID of the payment, based on the integration                                                                                                                                                                                                        \t|\n| `payment.amount` (required)            \t| number   \t| The amount paid by the guest. Value is in cents                                                                                                                                                                                                        \t|\n| `payment.tip` (required)               \t| number   \t| The amount tipped by the guest. Value is in cents                                                                                                                                                                                                      \t|\n| `payment.last4`                        \t| string   \t| The last 4 of the credit card used on that payment. If the payment was made via cash, this field should be `null`                                                                                                                                      \t|\n| `payment.payment_type` (required)      \t| string   \t| The type of payment, must be one of the following values: [`credit_card`, `debit_card`, `ebt_card`, `gift_card`, `google_pay`, `apple_pay`, `cash`]                                                                                                    \t|\n| `payment.card_type`                    \t| string   \t| What type of payment the card is (VISA, MasterCard, etc.)                                                                                                                                                                                              \t|\n| `payment.comments`                     \t| string   \t| Any free field notes made on the payment                                                                                                                                                                                                               \t|\n| `payment.card_token`                   \t| string   \t| If the card token integration is enabled for the provider, this field represents the unique card token for the credit card on this payment. If the payment was cash, this field should be `null`                                                       \t|\n| `ticket.items` (required)              \t| array    \t| All line items on the check that the guest will have to pay for                                                                                                                                                                                        \t|\n| `item.source_id` (required)            \t| string   \t| The ID of the item, based on the integration                                                                                                                                                                                                           \t|\n| `item.name` (required)                 \t| string   \t| The name of the item, as represented by the restaurant's menu                                                                                                                                                                                          \t|\n| `item.sku`                  \t | string   \t| The stock keeping unit (SKU) of the item. Generally is defined by the restaurant                                                                                                                                                                                \t|\n| `item.comment`                         \t| string   \t| A free text field present if the guest adds special requests onto the item                                                                                                                                                                             \t|\n| `item.price` (required)                \t| number   \t| The total price of the item at the given quantity after discounts have been applied, if any. Value should be in cents                                                                                                                                  \t|\n| `item.quantity` (required)             \t| number   \t| The quantity of items being purchased                                                                                                                                                                                                                  \t|\n| `item.voided` (required)               \t| boolean  \t| Represents whether the item was voided or not                                                                                                                                                                                                          \t|\n| `item.menu_item_id` (required)         \t| string   \t| The ID of the menu item, per the restaurant's menu                                                                                                                                                                                                     \t|\n| `item.modifiers` (required)            \t| array    \t| All modifiers which modify the current item in question. Ex. \"add onions\" on a hamburger. Can be an empty array                                                                                                                                        \t|\n| `modifier.source_id` (required)        \t| string   \t| The ID of the modifier, based on the integration                                                                                                                                                                                                       \t|\n| `modifier.name` (required)             \t| string   \t| The name of the modifier                                                                                                                                                                                                                               \t|\n| `modifier.comment`                     \t| string   \t| A free text field present if the guest adds special requests onto the modifier                                                                                                                                                                         \t|\n| `modifier.price` (required)            \t| number   \t| The total price of the modifier at the given quantity after discounts have been applied, if any. Value should be in cents                                                                                                                              \t|\n| `modifier.quantity` (required)         \t| number   \t| The quantity of modifiers being purchased                                                                                                                                                                                                              \t|\n| `modifier.menu_modifier_id` (required) \t| string   \t| The ID of the modifier, per the restaurant's menu                                                                                                                                                                                                      \t|\n| `modifier.modifiers` (required)        \t| array    \t| A modifier can have modifiers on it. The schema is identical to the `item.modifiers`. Should be an empty array if there are none                                                                                                                       \t|"
          },
          "response": []
        },
        {
          "name": "New Request",
          "id": "c27a253e-cac0-46a0-8c48-51287fed8a11",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": null
          },
          "response": []
        }
      ],
      "id": "c6db6568-97a8-42c5-8023-67481c33fb5b",
      "description": "## Authorization\n\nThis API will require a OAuth Bearer Token.  Omitting the token will result in a 401 Unauthorized Response.  See [Get Bearer Token](#b39c8f31-e907-4b58-a1d2-49eeaf43b9e2) for details."
    },
    {
      "name": "Guest Profile",
      "item": [
        {
          "name": "Get Guest Profile",
          "id": "f089872b-f569-476e-acf8-1d4562d7dff5",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{baseUrl}}/guest/profile"
          },
          "response": []
        }
      ],
      "id": "8ec9110c-c5fd-4649-a4cf-844a57ea7e69",
      "description": "The Guest Profile API can be used to query custom attributes, segment memberships, recently tracked events, and other data available on a Wisely Guest Profile. \n\nThe Guest Profiles API can be used to drive one-to-one personalized experiences for your guests across any channel:\n\n## Authorization\n\nThis API will require a OAuth Bearer Token.  Omitting the token will result in a 401 Unauthorized Response.  See [Get Bearer Token](#b39c8f31-e907-4b58-a1d2-49eeaf43b9e2) for details."
    },
    {
      "name": "Guest Data Streams",
      "item": [
        {
          "name": "Update Guest Identity",
          "id": "2368b262-11fc-403e-86af-036bc563abc4",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Basic YWJjMTIzOg==",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"josh@getwisely.com\",\n    \"fields\": {\n        \"loyalty_points_balance\": 150,\n        \"loyalty_status\": \"Gold Member\",\n        \"favorite_menu_item\": \"Lobster Tacos\",\n        \"average_spend\": 43.25,\n        \"max_spend_single_visit\": 146.32\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/guest/identify",
            "description": "`Identify` lets you track changes to a guests profile and add custom properties from any data source.  This might include loyalty points or a special VIP indication used by your brand."
          },
          "response": []
        },
        {
          "name": "Track Guest Events",
          "id": "e103b561-e307-46ba-8f3f-3e6c21962104",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Basic YWJjMTIzOg==",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"event\": \"Order Completed\",\n    \"email\": \"josh@getwisely.com\",\n    \"properties\": {\n        \"total\": 34.50,\n        \"items\": [\n            {\n                \"id\": \"1234\",\n                \"name\": \"Barbacoa Tacos\",\n                \"quantity\": 2,\n                \"price\": 3.50\n            },\n            {\n                \"id\": \"4321\",\n                \"name\": \"Lobster Tacos\",\n                \"quantity\": 5,\n                \"price\": 5.50\n            }\n        ]\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/guest/track",
            "description": "`Track` lets you record any actions your guests perform.  Think of this as a list of all touch points a guest has with your brand.  This might include online orders, loyalty redemptions, or marketing email engagement events."
          },
          "response": []
        },
        {
          "name": "Batch Events",
          "id": "bc38b89d-d0b1-48f4-9f77-e19dce4ed889",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Basic YWJjMTIzOg==",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"batch\": [\n        {\n            \"type\": \"track\",\n            \"event\": \"Order Completed\",\n            \"email\": \"josh@getwisely.com\",\n            \"properties\": {\n                \"total\": 24.00,\n                \"items\": [\n                    {\n                        \"id\": \"1234\",\n                        \"name\": \"Barbacoa Tacos\",\n                        \"quantity\": 2,\n                        \"price\": 3.50\n                    },\n                    {\n                        \"id\": \"4321\",\n                        \"name\": \"Lobster Tacos\",\n                        \"quantity\": 3,\n                        \"price\": 5.50\n                    }\n                ]\n            }  \n        },\n        {\n            \"type\": \"identify\",\n            \"email\": \"josh@getwisely.com\",\n            \"fields\": {\n                \"loyalty_points_balance\": 150,\n                \"loyalty_status\": \"Gold Member\",\n                \"favorite_menu_item\": \"Lobster Tacos\",\n                \"average_spend\": 43.25,\n                \"max_spend_single_visit\": 146.32\n            }\n        }\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/guest/batch",
            "description": "To optimize performance, you may also pass events in bulk.  This may include both Identity and Track events.\n\nEach event must include the `type` (`identify` or `track`).  Otherwise the payloads are identical to what is described in [Update Guest Identity](#2368b262-11fc-403e-86af-036bc563abc4) and [Track Guest Events](#e103b561-e307-46ba-8f3f-3e6c21962104)"
          },
          "response": []
        }
      ],
      "id": "1b0bd614-10ad-4a26-829f-0e2f49a6f22a",
      "description": "Each data source will have a unique **Source Token** that identifies you as a customer as well as the specific source of data.  For example, a loyalty provider, POS data, and raw HTTP requests will each have their own token.  \n\nThis allows us to forward data to specific destinations and intelligently control how identities are merged.  Keeping the tokens separate also allows forwarding historical data from a specific source if you choose to switch destination vendors in the future (eg. switching to a different marketing provider)\n\n## Authorization\n\nThe Data Streams API uses basic authentication.  Omitting the token will result in a 401 Unauthorized Response. \n\nHTTP Basic Authentication involves `username:password`, base64 encoded, and prepended with `Basic`.  \n\nIn practice for this API, you will take a **Source Token**, append a colon, and leave the password empty.  For example, if your token is `abcde12345`, you will base64 encode it to become `YWJjZGUxMjM0NQ==`.  You will then pass this as the authorization header like so: 'Authorization: Basic YWJjMTIzOg=='.\n\n## Webhooks and Third Party Destinations\n\nAll event and identity data captured by the Data Streams API can be forwarded to a destination of your choosing via a POST request to a configurable URL.  This data will be sent formatted exactly how the original request was made.  See [Webhooks](#e268cc48-f30c-41f3-bdb8-4dcf26fc7478) for more details.\n \nWisely also supports direct integrations to various data destinations like loyalty and marketing providers.  This will empower your brand to utilize combined guest data in any platform of your choosing without vendor lock in. Please discuss the integration options with your Wisely CSM.  \n\n## Online Ordering Events\n\nOrdering events must follow a specific syntax to support special behavior in third party destinations.  For example we will hit Iterable's `Track Purchase` endpoint instead of the standard `Track Event` endpoint.\n\n|       Property      \t|  Type  \t|                              Description                              \t|\n|:-------------------:\t|:------:\t|:---------------------------------------------------------------------:\t|\n| id            \t| string \t| Unique order identifier                                               \t|\n| total               \t| number \t| Order total in dollars                                                \t|\n| subtotal            \t| number \t| Order total before taxes and other fees                               \t|\n| items               \t| array  \t| Items in the order                                                    \t|\n| guest               \t| object \t| Basic identifiers for guest                                           \t|\n| guest.name          \t| string \t| Name of guest                                                         \t|\n| guest.phone         \t| string \t| Phone number of guest                                                 \t|\n| guest.user_uuid     \t| string \t| Unique identifier for the guest in your brand                         \t|\n| items[*].item_id    \t| string \t| Unique identifier for the product (should be consistent across orders \t|\n| items[*].name       \t| string \t| Name of the product                                                   \t|\n| items[*].unit_price \t| number \t| Unit price in dollars for the product                                 \t|\n| items[*].quantity   \t| number \t| Quantity of item in the order                                         \t|\n"
    },
    {
      "name": "Webhooks",
      "item": [],
      "id": "e268cc48-f30c-41f3-bdb8-4dcf26fc7478",
      "description": "Webhooks allow Wisely to notify a custom application when events happen.  This might include when order data is collected, a guest arrives to pickup their order, or a guest leaves feedback.  Wisely simply forwards the data to your endpoint so you can perform any custom logic you'd wish!\n\nThe configured Webhook Endpoint must return a 200 response as quickly as possible.  Please return a success before performing any complex, time consuming logic on your system.\n\n**Retries**\n\nWisely will attempt to send each event up to 3 times if we receive a 5xx response.  We employ a basic exponential backoff algoritm for retries (eg. 1 second, 4 seconds, 9 seconds)\n\n## Common Fields\n```\n{\n  \"event_id\": \"140fa2df-7a3a-4190-9c5f-cfa2c6c6feef\",\n  \"event_name\": \"Order Guest Arrived\",\n  \"created_at\": \"2021-03-05T13:04:08-07:00\",\n  \"data\": {\n    ...this will include fields specific to the event type\n  }\n}\n``` \n\nOnline Ordering Webhooks contain data as described in [Online Ordering Events](#1b0bd614-10ad-4a26-829f-0e2f49a6f22a)"
    },
    {
      "name": "Get Bearer Token",
      "id": "b39c8f31-e907-4b58-a1d2-49eeaf43b9e2",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/x-www-form-urlencoded",
            "type": "text"
          }
        ],
        "body": {
          "mode": "urlencoded",
          "urlencoded": [
            {
              "key": "grant_type",
              "value": "client_credentials",
              "type": "text"
            },
            {
              "key": "client_id",
              "value": "****",
              "type": "text"
            },
            {
              "key": "client_secret",
              "value": "****",
              "type": "text"
            }
          ]
        },
        "url": "{{baseAuthUrl}}/oauth2/default/v1/token",
        "description": "Using your Wisely provided client ID and client secret, you may fetch a refreshed access token.  Your credentials carry access to your customer data, so be sure to keep them secret! \n**Do not share your client_id or client_secret in publicly accessible areas such as GitHub or client-side code.**\n        \nThe access token is a JWT containing the keys `token_type`, `expires_in`, `access_token`, and `scope`.\n        \nYou will use the `access_token` key prefixed with \"Bearer \" in the `Authorization` header for all requsts. `Authorization: Bearer eyJraWQiOiIx...`\n        \n**Please note `expires_in` indicates that the token is valid for 3600 seconds (1 hour).  Please cache your tokens for this duration before refreshing or you may experience a rate limit."
      },
      "response": [
        {
          "id": "3b99e7f5-3ec3-4df8-b569-386247a39e24",
          "name": "Get Bearer Token",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "type": "text"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                },
                {
                  "key": "client_id",
                  "value": "****",
                  "type": "text"
                },
                {
                  "key": "client_secret",
                  "value": "****",
                  "type": "text"
                }
              ]
            },
            "url": "{{baseAuthUrl}}/oauth2/default/v1/token"
          },
          "_postman_previewlanguage": "json",
          "header": null,
          "cookie": [],
          "responseTime": null,
          "body": "{\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3600,\n    \"access_token\": \"eyJraW....\",\n    \"scope\": \"string\"\n}"
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "18253f40-0985-4959-87eb-a18f8984c89c",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "90eededb-ae57-4214-b04a-ec32bcde4b5f",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}